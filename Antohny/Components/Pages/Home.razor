@page "/"
@inject NavigationManager Navigation
@inject Antohny.Services.FirebaseLoginService FirebaseLoginService

<!-- Estilos personalizados -->
<style>
    body {
        background-color: #1e3257;
        color: white;
    }

    .form-box {
        background-color: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        padding: 25px;
        border-radius: 12px;
        border: 1px solid #ffffff33;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }

    .form-control, .form-select {
        background-color: #fff;
        border-radius: 6px;
        border: none;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
    }

    .btn-success {
        background-color: #28a745;
        border: none;
    }

    .btn-outline-primary, .btn-outline-success {
        color: white;
        border-color: white;
    }

        .btn-outline-primary:hover, .btn-outline-success:hover {
            background-color: white;
            color: #1e3257;
        }

    .alert {
        background-color: #ffc107;
        color: #000;
        font-weight: bold;
    }
</style>

<h1 style="text-align:center; margin-bottom: 30px; color: white;">
    RendiMas
</h1>

@if (!isLoggedIn)
{
    <h3 style="text-align: center; margin-bottom: 20px; color: white;">Login Anthony</h3>

    <div class="form-box" style="max-width: 400px; margin: auto;">
        <div class="btn-group mb-3 w-100" role="group">
            <button class="btn @(isLogin ? "btn-primary" : "btn-outline-primary")" @onclick="() => isLogin = true">Login</button>
            <button class="btn @(!isLogin ? "btn-success" : "btn-outline-success")" @onclick="() => isLogin = false">Registrar</button>
        </div>

        @if (isLogin)
        {
            <!-- Login Form -->
            <div>
                <div class="form-group mb-3">
                    <label for="loginEmail">📧 Email</label>
                    <input id="loginEmail" @bind="loginEmail" type="email" class="form-control" placeholder="email@empresa.com" />
                </div>

                <div class="form-group mb-3">
                    <label for="loginPassword">🔒 Contraseña</label>
                    <input id="loginPassword" @bind="loginPassword" type="password" class="form-control" placeholder="********" />
                </div>

                <button class="btn btn-primary w-100 mb-3" @onclick="LoginUser">Ingresar</button>

                @if (!string.IsNullOrEmpty(loginError))
                {
                    <div class="alert alert-warning text-center">@loginError</div>
                }
            </div>
        }
        else
        {
            <!-- Register Form -->
            <div>
                <div class="form-group mb-3">
                    <label for="registerFullName" style="color:white;">👤 Nombre completo</label>
                    <input id="registerFullName" @bind="registerFullName" type="text" class="form-control" placeholder="Tu nombre completo" />
                </div>

                <div class="form-group mb-3">
                    <label for="registerEmail" style="color:white;">📧 Email</label>
                    <input id="registerEmail" @bind="registerEmail" type="email" class="form-control" placeholder="email@empresa.com" />
                </div>

                <div class="form-group mb-3">
                    <label for="registerPassword" style="color:white;">🔒 Contraseña</label>
                    <input id="registerPassword" @bind="registerPassword" type="password" class="form-control" placeholder="********" />
                </div>

                <button class="btn btn-success w-100 mb-3" @onclick="RegisterUser" style="border-radius: 6px;">Registrar</button>

                @if (!string.IsNullOrEmpty(registerError))
                {
                    <div class="alert alert-warning text-center mt-2">@registerError</div>
                }
                @if (!string.IsNullOrEmpty(registerSuccess))
                {
                    <div class="alert alert-success text-center mt-2">@registerSuccess</div>
                }
            </div>

        }
    </div>
}
else
{
    <div style="text-align:center; margin-top: 100px;">
        <h1 style="font-size: 3rem;">¡Bienvenido, @loggedInUserFullName!</h1>
        <button class="btn btn-danger mt-5" @onclick="LogoutUser">Cerrar sesión</button>
    </div>
}

@code {
    private bool isLogin = true;
    private bool isLoggedIn = false;

    private string loginEmail = "";
    private string loginPassword = "";
    private string loginError = "";

    private string registerFullName = "";
    private string registerEmail = "";
    private string registerPassword = "";
    private string registerError = "";
    private string registerSuccess = "";

    private string savedFullName = "";
    private string loggedInUserFullName = "";

    private async Task RegisterUser()
    {
        registerError = "";
        registerSuccess = "";

        if (string.IsNullOrWhiteSpace(registerFullName))
        {
            registerError = "El nombre es obligatorio.";
            return;
        }
        if (!System.Text.RegularExpressions.Regex.IsMatch(registerFullName, @"^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$"))
        {
            registerError = "El nombre solo puede contener letras.";
            return;
        }

        if (string.IsNullOrWhiteSpace(registerEmail))
        {
            registerError = "El email es obligatorio.";
            return;
        }
        if (!System.Text.RegularExpressions.Regex.IsMatch(registerEmail, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            registerError = "Ingrese un email válido.";
            return;
        }

        if (string.IsNullOrWhiteSpace(registerPassword))
        {
            registerError = "La contraseña es obligatoria.";
            return;
        }
        if (registerPassword.Length != 6)
        {
            registerError = "La contraseña debe tener exactamente 6 caracteres.";
            return;
        }

        try
        {
            var auth = await FirebaseLoginService.RegisterAsync(registerEmail, registerPassword, registerFullName);

            if (auth.StartsWith("Error:"))
            {
                registerError = "Error al registrar: " + auth;
                return;
            }

            registerSuccess = "Registrado con éxito.";
            registerFullName = "";
            registerEmail = "";
            registerPassword = "";
        }
        catch (Exception ex)
        {
            registerError = ex.Message;
        }
    }

    private async Task LoginUser()
    {
        loginError = "";

        try
        {
            var token = await FirebaseLoginService.LoginAsync(loginEmail, loginPassword);

            if (token.StartsWith("Error:"))
            {
                loginError = "Email o contraseña incorrectos.";
                return;
            }

            loggedInUserFullName = savedFullName;
            isLoggedIn = true;
            loginEmail = "";
            loginPassword = "";
            Navigation.NavigateTo("/bienvenido");
        }
        catch
        {
            loginError = "Ocurrió un error al intentar iniciar sesión.";
        }
    }

    private void LogoutUser()
    {
        isLoggedIn = false;
        loggedInUserFullName = "";
        isLogin = true;
    }
}
